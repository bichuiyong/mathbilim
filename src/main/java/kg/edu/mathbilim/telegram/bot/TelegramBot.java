package kg.edu.mathbilim.telegram.bot;

import jakarta.annotation.PostConstruct;
import kg.edu.mathbilim.service.interfaces.UserService;
import kg.edu.mathbilim.telegram.config.BotConfig;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;
    private final UserService userService;

    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    private ReplyKeyboardMarkup mainMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è");
        row1.add("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏");

        keyboard.setKeyboard(List.of(row1, row2));
        return keyboard;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!(update.hasMessage() && update.getMessage().hasText())) {
            return;
        }

        String chatId = update.getMessage().getChatId().toString();
        String userMessage = update.getMessage().getText();

        SendMessage message = new SendMessage();
        message.setChatId(chatId);

        try {
            if (userMessage.startsWith("/start")) {
                handleStartCommand(userMessage, chatId, message);
            } else {
                handleUserMessage(userMessage, chatId, message);
            }
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", e);
        }
    }

    private void handleStartCommand(String userMessage, String chatId, SendMessage message) {
        String[] parts = userMessage.split(" ");
        if (parts.length > 1) {
            boolean registered = registerChatId(parts[1], chatId);
            if (registered) {
                message.setText("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!\n–í–∞—à chat ID: " + chatId);
            } else {
                if (userService.isSubscribed(Long.parseLong(chatId))) {
                    message.setText("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.");
                } else {
                    message.setText("‚ö†Ô∏è –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.");
                }
            }
        } else {
            boolean subscribed = userService.isSubscribed(Long.parseLong(chatId));
            String baseMessage = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n";
            if (subscribed) {
                message.setText(baseMessage + "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
            } else {
                message.setText(baseMessage + "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.");
            }
        }
        message.setReplyMarkup(mainMenuKeyboard());
    }

    private void handleUserMessage(String userMessage, String chatId, SendMessage message) {
        switch (userMessage) {
            case "/help" -> message.setText("""
                ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
                /start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
                /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
                /id ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Chat ID
                /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
                """);
            case "/id" -> message.setText("üÜî –í–∞—à chat ID: " + chatId);
            case "/menu" -> {
                message.setText("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
                message.setReplyMarkup(mainMenuKeyboard());
            }
            case "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" -> {
                subscribe(chatId);
                message.setText("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!");
            }
            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" -> {
                unsubscribe(chatId);
                message.setText("üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
            }
            default -> message.setText("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + userMessage);
        }
    }

    @PostConstruct
    public void initCommands() {
        List<BotCommand> commandList = List.of(
                new BotCommand("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                new BotCommand("/help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
                new BotCommand("/id", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π chat ID"),
                new BotCommand("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        );

        try {
            execute(new SetMyCommands(commandList, new BotCommandScopeDefault(), null));
            log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        } catch (TelegramApiException e) {
            log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:", e);
        }
    }

    private boolean registerChatId(String userId, String chatId) {
        try {
            Long user = Long.parseLong(userId);
            Long chat = Long.parseLong(chatId);

            if (userService.hasChatId(user)) {
                return false;
            }

            userService.registerChatId(user, chat);
            return true;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chatId", e);
            return false;
        }
    }

    private void unsubscribe(String chatId) {
        try {
            userService.unsubscribe(Long.parseLong(chatId));
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId=" + chatId, e);
        }
    }

    private void subscribe(String chatId) {
        try {
            userService.subscribe(Long.parseLong(chatId));
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId=" + chatId, e);
        }
    }
}
