package kg.edu.mathbilim.telegram.bot;

import jakarta.annotation.PostConstruct;
import kg.edu.mathbilim.model.notifications.NotificationEnum;
import kg.edu.mathbilim.service.interfaces.UserService;
import kg.edu.mathbilim.telegram.config.BotConfig;
import kg.edu.mathbilim.telegram.enumTelegram.SubscriptionResult;
import kg.edu.mathbilim.telegram.service.TelegramUserService;
import kg.edu.mathbilim.telegram.enumTelegram.UnsubscriptionResult;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;
    private final UserService userService;
    private final TelegramUserService telegramUserService;


    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    private ReplyKeyboardMarkup mainMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏");
        row1.add("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞");
        row2.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");

        keyboard.setKeyboard(List.of(row1, row2));
        return keyboard;
    }

    private InlineKeyboardMarkup subscriptionManagementKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInlineButton("üèÜ –û–ª–∏–º–ø–∏–∞–¥—ã", "sub_OLYMPIAD"));
        row1.add(createInlineButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "sub_NEWS"));
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInlineButton("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏–∏", "sub_POST"));
        row2.add(createInlineButton("üìñ –ë–ª–æ–≥–∏", "sub_BLOG"));
        rows.add(row2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInlineButton("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "sub_EVENT"));
        rows.add(row3);

        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createInlineButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", "sub_all"));
        row4.add(createInlineButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", "unsub_all"));
        rows.add(row4);

        List<InlineKeyboardButton> row5 = new ArrayList<>();
        row5.add(createInlineButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main"));
        rows.add(row5);

        markup.setKeyboard(rows);
        return markup;
    }

    // –ù–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–∏
    private InlineKeyboardMarkup quickUnsubscribeKeyboard(List<String> subscriptions) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (!subscriptions.isEmpty()) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            List<InlineKeyboardButton> headerRow = new ArrayList<>();
            headerRow.add(createInlineButton("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", "header"));
            rows.add(headerRow);

            // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
            for (String subscription : subscriptions) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                String emoji = getSubscriptionEmoji(subscription);
                String name = getSubscriptionName(subscription);
                row.add(createInlineButton(emoji + " " + name + " ‚ùå", "quick_unsub_" + subscription));
                rows.add(row);
            }

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            List<InlineKeyboardButton> dividerRow = new ArrayList<>();
            dividerRow.add(createInlineButton("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", "divider"));
            rows.add(dividerRow);
        } else {
            List<InlineKeyboardButton> noSubsRow = new ArrayList<>();
            noSubsRow.add(createInlineButton("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", "no_subs"));
            rows.add(noSubsRow);
        }

        // –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        List<InlineKeyboardButton> controlRow = new ArrayList<>();
        controlRow.add(createInlineButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_quick_unsub"));
        controlRow.add(createInlineButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", "confirm_unsub_all"));
        rows.add(controlRow);

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main"));
        rows.add(backRow);

        markup.setKeyboard(rows);
        return markup;
    }

    // –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ—Ö
    private InlineKeyboardMarkup confirmUnsubscribeAllKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> confirmRow = new ArrayList<>();
        confirmRow.add(createInlineButton("‚úÖ –î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", "execute_unsub_all"));
        confirmRow.add(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_unsub_all"));
        rows.add(confirmRow);

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "quick_unsubscribe"));
        rows.add(backRow);

        markup.setKeyboard(rows);
        return markup;
    }

    // –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private InlineKeyboardMarkup settingsKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInlineButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", "manage_subscriptions"));
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInlineButton("‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞", "quick_unsubscribe"));
        rows.add(row2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInlineButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "subscription_stats"));
        rows.add(row3);

        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createInlineButton("üÜî –ú–æ–π Chat ID", "show_chat_id"));
        rows.add(row4);

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(backRow);

        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardMarkup mySubscriptionsKeyboard(List<String> subscriptions) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (!subscriptions.isEmpty()) {
            for (String subscription : subscriptions) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                String emoji = getSubscriptionEmoji(subscription);
                String name = getSubscriptionName(subscription);
                row.add(createInlineButton(emoji + " " + name + " ‚úÖ", "unsub_" + subscription));
                rows.add(row);
            }
        }

        List<InlineKeyboardButton> controlRow1 = new ArrayList<>();
        controlRow1.add(createInlineButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_subs"));
        controlRow1.add(createInlineButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "add_subscription"));
        rows.add(controlRow1);

        List<InlineKeyboardButton> controlRow2 = new ArrayList<>();
        controlRow2.add(createInlineButton("‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞", "quick_unsubscribe"));
        controlRow2.add(createInlineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(controlRow2);

        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private String getSubscriptionEmoji(String subscription) {
        return switch (subscription.toUpperCase()) {
            case "OLYMPIAD" -> "üèÜ";
            case "NEWS" -> "üì∞";
            case "POST" -> "üìù";
            case "BLOG" -> "üìñ";
            case "EVENT" -> "üéâ";
            default -> "üìå";
        };
    }

    private String getSubscriptionName(String subscription) {
        return switch (subscription.toUpperCase()) {
            case "OLYMPIAD" -> "–û–ª–∏–º–ø–∏–∞–¥—ã";
            case "NEWS" -> "–ù–æ–≤–æ—Å—Ç–∏";
            case "POST" -> "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏";
            case "BLOG" -> "–ë–ª–æ–≥–∏";
            case "EVENT" -> "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
        };
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleTextMessage(update);
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            log.error("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ", e);
        }
    }

    private void handleTextMessage(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String userMessage = update.getMessage().getText();

        log.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: chatId={}, message={}", chatId, userMessage);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setParseMode("HTML");

        try {
            if (userMessage.startsWith("/start")) {
                handleStartCommand(userMessage, chatId, message);
            } else {
                handleUserMessage(userMessage, chatId, message);
            }

            if (message.getText() != null && !message.getText().isEmpty()) {
                log.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: chatId={}, response length={}", chatId, message.getText().length());
                execute(message);
            } else {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: chatId={}", chatId);
            }
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId={}", chatId, e);
        }
    }

    private void handleCallbackQuery(Update update) {
        String chatId = update.getCallbackQuery().getMessage().getChatId().toString();
        String callbackData = update.getCallbackQuery().getData();

        log.info("üîò –ü–æ–ª—É—á–µ–Ω callback: chatId={}, data={}", chatId, callbackData);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setParseMode("HTML");

        try {
            handleCallbackData(callbackData, chatId, message);
            if (message.getText() != null && !message.getText().isEmpty()) {
                log.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback: chatId={}, response length={}", chatId, message.getText().length());
                execute(message);
            } else {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ callback: chatId={}", chatId);
            }
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: chatId={}, data={}", chatId, callbackData, e);
        }
    }

    private void handleCallbackData(String callbackData, String chatId, SendMessage message) {
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback data: {}", callbackData);

        switch (callbackData) {
            case "add_subscription", "manage_subscriptions" -> {
                message.setText(createSubscriptionManagementText());
                message.setReplyMarkup(subscriptionManagementKeyboard());
            }
            case "quick_unsubscribe" -> {
                showQuickUnsubscribe(chatId, message);
            }
            case "refresh_quick_unsub" -> {
                showQuickUnsubscribe(chatId, message);
            }
            case "confirm_unsub_all" -> {
                message.setText(createConfirmUnsubscribeAllText());
                message.setReplyMarkup(confirmUnsubscribeAllKeyboard());
            }
            case "execute_unsub_all" -> {
                unsubscribeFromAll(chatId);
                message.setText(createUnsubscriptionText("–≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"));
                showQuickUnsubscribe(chatId, message);
            }
            case "cancel_unsub_all" -> {
                showQuickUnsubscribe(chatId, message);
            }
            case "settings" -> {
                message.setText(createSettingsText());
                message.setReplyMarkup(settingsKeyboard());
            }
            case "subscription_stats" -> {
                showSubscriptionStats(chatId, message);
            }
            case "show_chat_id" -> {
                message.setText(createChatIdText(chatId));
                message.setReplyMarkup(settingsKeyboard());
            }
            case "back_to_main" -> {
                message.setText(createMainMenuText());
                message.setReplyMarkup(mainMenuKeyboard());
            }
            case "header", "divider", "no_subs" -> {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
                return;
            }
            default -> {
                if (callbackData.startsWith("sub_")) {
                    handleSubscriptionCallback(callbackData, chatId, message);
                } else if (callbackData.startsWith("unsub_")) {
                    handleUnsubscriptionCallback(callbackData, chatId, message);
                } else if (callbackData.startsWith("quick_unsub_")) {
                    handleQuickUnsubscriptionCallback(callbackData, chatId, message);
                } else if (callbackData.equals("refresh_subs")) {
                    showMySubscriptions(chatId, message);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: {}", callbackData);
                }
            }
        }
    }


    private void handleStartCommand(String userMessage, String chatId, SendMessage message) {
        log.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start: chatId={}, message={}", chatId, userMessage);

        String[] parts = userMessage.split(" ");
        if (parts.length > 1) {
            boolean registered = registerChatId(parts[1], chatId);
            if (registered) {
                message.setText(createWelcomeRegisteredText(chatId));
                message.setReplyMarkup(mainMenuKeyboard());
            } else {
                if (userService.hasChatId(Long.parseLong(chatId))) {
                    message.setText(createAlreadyConnectedText());
                } else {
                    message.setText(createRegisteredButDisabledText());
                }
                message.setReplyMarkup(mainMenuKeyboard());
            }
        } else {
            // –ù–µ—Ç userId - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            message.setText(createWelcomeText());
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        }
    }

    private void handleUserMessage(String userMessage, String chatId, SendMessage message) {
        log.info("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId={}, message='{}'", chatId, userMessage);

        if (!isUserAuthorized(chatId)) {
            log.warn("üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: chatId={}", chatId);
            message.setText(createUnauthorizedMessage());
            return;
        }

        // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        String normalizedMessage = userMessage.trim();

        switch (normalizedMessage) {
            case "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏" -> {
                log.info("üîî –û—Ç–∫—Ä—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: chatId={}", chatId);
                message.setText(createSubscriptionManagementText());
                message.setReplyMarkup(subscriptionManagementKeyboard());
            }

            case "üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏" -> {
                log.info("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId={}", chatId);
                showMySubscriptions(chatId, message);
            }

            case "‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞" -> {
                log.info("‚ö° –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—É—é –æ—Ç–ø–∏—Å–∫—É: chatId={}", chatId);
                showQuickUnsubscribe(chatId, message);
            }

            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> {
                log.info("‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: chatId={}", chatId);
                message.setText(createSettingsText());
                message.setReplyMarkup(settingsKeyboard());
            }

            default -> {
                log.warn("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: chatId={}, message='{}'", chatId, normalizedMessage);
                message.setText(createUnknownCommandText(normalizedMessage));
            }
        }
    }

    private boolean isUserAuthorized(String chatId) {
        try {
            boolean authorized = userService.hasChatId(Long.parseLong(chatId));
            log.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: chatId={}, authorized={}", chatId, authorized);
            return authorized;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: chatId={}", chatId, e);
            return false;
        }
    }

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤

    private String createMainMenuText() {
        return """
                üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MathBilim Bot</b>
                
                üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
                
                üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                üìä <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                ‚ùå <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞</b> - –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                
                üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é</i>
                """;
    }

    private String createQuickUnsubscribeText(List<String> subscriptions) {
        if (subscriptions.isEmpty()) {
            return """
                    ‚ùå <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞</b>
                    
                    ‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>
                    
                    üîï –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
                    
                    üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
                    ‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    
                    üîî <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>
                    """;
        }

        StringBuilder text = new StringBuilder();
        text.append("‚ùå <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞</b>\n\n");
        text.append("‚ö° <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º</b>\n\n");
        text.append("‚úÖ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (").append(subscriptions.size()).append("):</b>\n");

        for (String sub : subscriptions) {
            String emoji = getSubscriptionEmoji(sub);
            String name = getSubscriptionName(sub);
            text.append("‚Ä¢ ").append(emoji).append(" ").append(name).append("\n");
        }

        text.append("\nüí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏</i>\n");
        text.append("‚ö†Ô∏è <i>–û—Ç–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>");

        return text.toString();
    }

    private String createConfirmUnsubscribeAllText() {
        return """
                ‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏</b>
                
                üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
                –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç <b>–í–°–ï–•</b> —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
                
                ‚ùå <b>–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</b>
                ‚Ä¢ –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö
                ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π
                ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
                
                üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>
                –ü–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                
                ‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>
                """;
    }

    private String createQuickUnsubscriptionSuccessText(String subscriptionName) {
        return "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n" +
                "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <code>" + subscriptionName + "</code>\n\n" +
                "‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n" +
                "üîÑ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'";
    }

    private String createSettingsText() {
        return """
                ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>
                
                üéõÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>
                
                üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>
                   –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                
                ‚ùå <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞</b>
                   –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                
                üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>
                   –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                
                üÜî <b>–ú–æ–π Chat ID</b>
                   –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                
                üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é</i>
                """;
    }

    private String createChatIdText(String chatId) {
        return String.format("""
                üÜî <b>–í–∞—à Chat ID</b>
                
                üì± <b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>%s</code>
                
                ‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
                ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ Telegram
                ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ‚Ä¢ –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É MathBilim
                
                üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
                –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ Chat ID —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
                
                üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>
                """, chatId);
    }

    private void showQuickUnsubscribe(String chatId, SendMessage message) {
        log.info("‚ö° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—É—é –æ—Ç–ø–∏—Å–∫—É: chatId={}", chatId);

        try {
            List<String> userSubscriptions = telegramUserService.getAllSubscribedUsersType(Long.valueOf(chatId));
            log.info("üìä –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–∏: chatId={}, subscriptions={}", chatId, userSubscriptions);

            message.setText(createQuickUnsubscribeText(userSubscriptions));
            message.setReplyMarkup(quickUnsubscribeKeyboard(userSubscriptions));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–∏: chatId={}", chatId, e);
            message.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void showSubscriptionStats(String chatId, SendMessage message) {
        log.info("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫: chatId={}", chatId);

        try {
            List<String> userSubscriptions = telegramUserService.getAllSubscribedUsersType(Long.valueOf(chatId));

            StringBuilder text = new StringBuilder();
            text.append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n");

            text.append("üéØ <b>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:</b> ").append(userSubscriptions.size()).append(" –∏–∑ 5\n\n");

            if (!userSubscriptions.isEmpty()) {
                text.append("‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n");
                for (String sub : userSubscriptions) {
                    String emoji = getSubscriptionEmoji(sub);
                    String name = getSubscriptionName(sub);
                    text.append("‚Ä¢ ").append(emoji).append(" ").append(name).append(" ‚úÖ\n");
                }
                text.append("\n");
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            List<String> allTypes = List.of("OLYMPIAD", "NEWS", "POST", "BLOG", "EVENT");
            List<String> inactiveSubscriptions = allTypes.stream()
                    .filter(type -> !userSubscriptions.contains(type))
                    .toList();

            if (!inactiveSubscriptions.isEmpty()) {
                text.append("‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n");
                for (String sub : inactiveSubscriptions) {
                    String emoji = getSubscriptionEmoji(sub);
                    String name = getSubscriptionName(sub);
                    text.append("‚Ä¢ ").append(emoji).append(" ").append(name).append(" ‚ùå\n");
                }
                text.append("\n");
            }

            // –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            double percentage = (double) userSubscriptions.size() / allTypes.size() * 100;
            text.append("üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> ").append(String.format("%.0f", percentage)).append("%\n\n");

            if (percentage == 100) {
                text.append("üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            } else if (percentage >= 60) {
                text.append("üëç <b>–•–æ—Ä–æ—à–æ!</b> –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ");
            } else if (percentage >= 20) {
                text.append("‚ö†Ô∏è <b>–°—Ä–µ–¥–Ω–µ.</b> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤");
            } else {
                text.append("üîï <b>–ú–∞–ª–æ –ø–æ–¥–ø–∏—Å–æ–∫.</b> –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏");
            }

            message.setText(text.toString());
            message.setReplyMarkup(settingsKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: chatId={}", chatId, e);
            message.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            message.setReplyMarkup(settingsKeyboard());
        }
    }

    private String createUnauthorizedMessage() {
        return """
                üîê <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!</b>
                
                –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∞–π—Ç MathBilim.
                
                <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:</b>
                1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç MathBilim
                2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"  
                3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"
                4Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
                
                üí° <i>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã</i>
                """;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
    private String createWelcomeText() {
        return """
                ‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!</b>
                
                üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∞–π—Ç MathBilim.
                
                <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:</b>
                1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç MathBilim
                2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
                3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"
                4Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                
                üöÄ –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!
                
                üí° <i>–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ</i>
                """;
    }

    private String createSubscriptionManagementText() {
        return """
                üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>
                
                <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
                
                üèÜ <b>–û–ª–∏–º–ø–∏–∞–¥—ã</b>
                   –ù–æ–≤—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã
                
                üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>
                   –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                
                üìù <b>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏</b>
                   –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                
                üìñ <b>–ë–ª–æ–≥–∏</b>
                   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                
                üéâ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>
                   –°–µ–º–∏–Ω–∞—Ä—ã, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è
                
                üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</i>
                """;
    }

    private String createSubscriptionSuccessText(String subscriptionName) {
        return "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n" +
                "üéØ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞: <code>" + subscriptionName + "</code>\n\n" +
                "üì¨ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!";
    }

    private String createUnsubscriptionText(String subscriptionName) {
        return "üö´ <b>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n" +
                "üì§ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç: <code>" + subscriptionName + "</code>\n\n" +
                "‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.";
    }

    private String createWelcomeRegisteredText(String chatId) {
        return String.format("""
            ‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MathBilim!</b> üéì
            
            üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
            
            üÜî <b>–í–∞—à Chat ID:</b> <code>%s</code>
            
            <b>üöÄ –ß—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:</b>
            ‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫  
            ‚Ä¢ üèÜ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö
            ‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è
            ‚Ä¢ ‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞
            ‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            
            üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</i>
            """, chatId);
    }

    private String createAlreadyConnectedText() {
        return """
                ‚ö†Ô∏è <b>–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!</b>
                
                ‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
                ‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π MathBilim
                
                üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>–î–æ—Å—Ç—É–ø–Ω—ã</b>
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: <b>–ê–∫—Ç–∏–≤–Ω—ã</b>
                ‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞: <b>–î–æ—Å—Ç—É–ø–Ω–∞</b>
                
                üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>
                """;
    }

    private String createRegisteredButDisabledText() {
        return """
                ‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è!</b>
                
                üìã <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
                ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞</b>
                ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>–í—ã–∫–ª—é—á–µ–Ω—ã</b>
                
                üîß <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'
                
                üí° <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</i>
                """;
    }

    private String createUnknownCommandText(String userMessage) {
        return String.format("""
            ‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>
            
            ‚ö†Ô∏è <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> <code>%s</code>
            
            üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
            ‚Ä¢ üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            ‚Ä¢ üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            ‚Ä¢ ‚ùå –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞
            ‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            
            üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>
            """, userMessage);
    }

    private void showMySubscriptions(String chatId, SendMessage message) {
        log.info("üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chatId={}", chatId);

        try {
            List<String> userSubscriptions = telegramUserService.getAllSubscribedUsersType(Long.valueOf(chatId));
            log.info("üìä –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: chatId={}, subscriptions={}", chatId, userSubscriptions);

            if (userSubscriptions.isEmpty()) {
                message.setText("""
                        üìä <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>
                        
                        ‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>
                        
                        üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        
                        üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:</b>
                        ‚Ä¢ üèÜ –û–ª–∏–º–ø–∏–∞–¥—ã
                        ‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏  
                        ‚Ä¢ üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        
                        üîî <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>
                        """);
                message.setReplyMarkup(mySubscriptionsKeyboard(userSubscriptions));
            } else {
                StringBuilder text = new StringBuilder();
                text.append("üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n");
                text.append("‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n");

                for (String sub : userSubscriptions) {
                    String emoji = getSubscriptionEmoji(sub);
                    String name = getSubscriptionName(sub);
                    text.append("‚Ä¢ ").append(emoji).append(" <b>").append(name).append("</b> ‚úÖ\n");
                }

                text.append("\nüéØ <b>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:</b> ").append(userSubscriptions.size()).append(" –∏–∑ 5\n");
                text.append("üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—É—é –æ—Ç–ø–∏—Å–∫—É</i>");

                message.setText(text.toString());
                message.setReplyMarkup(mySubscriptionsKeyboard(userSubscriptions));
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–ø–∏—Å–æ–∫: chatId={}", chatId, e);
            message.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    @PostConstruct
    public void initCommands() {
        List<BotCommand> commandList = List.of(
                new BotCommand("/start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        );

        try {
            execute(new SetMyCommands(commandList, new BotCommandScopeDefault(), null));
            log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        } catch (TelegramApiException e) {
            log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:", e);
        }
    }

    private boolean registerChatId(String userId, String chatId) {
        log.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è chatId: userId={}, chatId={}", userId, chatId);

        try {
            Long user = Long.parseLong(userId);
            Long chat = Long.parseLong(chatId);

            if (userService.hasChatId(chat)) {
                log.info("‚ÑπÔ∏è ChatId —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: chatId={}", chatId);
                return false; // –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            }

            userService.registerChatId(user, chat);
            log.info("‚úÖ ChatId —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: userId={}, chatId={}", userId, chatId);
            return true;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chatId: userId={}, chatId={}", userId, chatId, e);
            return false;
        }
    }

    private void subscribeToType(String chatId, String subscriptionType) {
        log.info("‚ûï –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: chatId={}, type={}", chatId, subscriptionType);

        try {
            NotificationEnum notificationEnum = NotificationEnum.valueOf(subscriptionType.toUpperCase());
            log.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º telegramUserService.subcribe: enum={}, chatId={}", notificationEnum, chatId);

            telegramUserService.subscribe(notificationEnum, Long.parseLong(chatId));

            log.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chatId={}, type={}", chatId, subscriptionType);
        } catch (IllegalArgumentException e) {
            log.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: chatId={}, type={}", chatId, subscriptionType, e);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {}: chatId={}", subscriptionType, chatId, e);
        }
    }

    private void unsubscribeFromType(String chatId, String subscriptionType) {
        log.info("‚ûñ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: chatId={}, type={}", chatId, subscriptionType);

        try {
            NotificationEnum notificationType = NotificationEnum.valueOf(subscriptionType.toUpperCase());
            log.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º telegramUserService.unsubscribe: enum={}, chatId={}", notificationType, chatId);

            telegramUserService.unsubscribe(notificationType, Long.parseLong(chatId));

            log.info("‚úÖ –û—Ç–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chatId={}, type={}", chatId, subscriptionType);
        } catch (IllegalArgumentException e) {
            log.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–ø–∏—Å–∫–∏: chatId={}, type={}", chatId, subscriptionType, e);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç {}: chatId={}", subscriptionType, chatId, e);
        }
    }

    private void subscribeToAll(String chatId) {
        log.info("‚ûï –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ: chatId={}", chatId);

        try {
            log.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º userService.subscribe: chatId={}", chatId);
            telegramUserService.subscribeToAll(Long.parseLong(chatId));
            log.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chatId={}", chatId);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –≤—Å–µ: chatId={}", chatId, e);
        }
    }

    private void unsubscribeFromAll(String chatId) {
        log.info("‚ûñ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ–≥–æ: chatId={}", chatId);

        try {
            log.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º userService.unsubscribe: chatId={}", chatId);
            telegramUserService.unsubscribeFromAll(Long.parseLong(chatId));
            log.info("‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: chatId={}", chatId);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –≤—Å–µ—Ö: chatId={}", chatId, e);
        }
    }

    private List<String> getUserSubscriptions(String chatId) {
        try {
            return telegramUserService.getAllSubscribedUsersType(Long.parseLong(chatId));
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: chatId={}", chatId, e);
            return new ArrayList<>();
        }
    }










    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ TelegramBot

    private void handleSubscriptionCallback(String callbackData, String chatId, SendMessage message) {
        String subscriptionType = callbackData.replace("sub_", "");
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: type={}, chatId={}", subscriptionType, chatId);

        if ("all".equals(subscriptionType)) {
            int newSubscriptions = telegramUserService.subscribeToAll(Long.parseLong(chatId));
            if (newSubscriptions > 0) {
                message.setText(createSubscribeToAllSuccessText(newSubscriptions));
            } else {
                message.setText(createAlreadySubscribedToAllText());
            }
        } else {
            try {
                NotificationEnum notificationEnum = NotificationEnum.valueOf(subscriptionType.toUpperCase());
                SubscriptionResult result =
                        telegramUserService.subscribe(notificationEnum, Long.parseLong(chatId));

                String typeName = getSubscriptionName(subscriptionType);

                switch (result) {
                    case SUCCESS -> message.setText(createSubscriptionSuccessText(typeName));
                    case ALREADY_SUBSCRIBED -> message.setText(createAlreadySubscribedText(typeName));
                    case ERROR -> message.setText(createSubscriptionErrorText(typeName));
                }
            } catch (IllegalArgumentException e) {
                log.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {}", subscriptionType, e);
                message.setText(createInvalidSubscriptionTypeText());
            }
        }
        message.setReplyMarkup(subscriptionManagementKeyboard());
    }

    private void handleUnsubscriptionCallback(String callbackData, String chatId, SendMessage message) {
        String subscriptionType = callbackData.replace("unsub_", "");
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: type={}, chatId={}", subscriptionType, chatId);

        if ("all".equals(subscriptionType)) {
            telegramUserService.unsubscribeFromAll(Long.parseLong(chatId));
            message.setText(createUnsubscribeFromAllSuccessText());
        } else {
            try {
                NotificationEnum notificationEnum = NotificationEnum.valueOf(subscriptionType.toUpperCase());
                UnsubscriptionResult result =
                        telegramUserService.unsubscribe(notificationEnum, Long.parseLong(chatId));

                String typeName = getSubscriptionName(subscriptionType);

                switch (result) {
                    case SUCCESS -> message.setText(createUnsubscriptionSuccessText(typeName));
                    case NOT_SUBSCRIBED -> message.setText(createNotSubscribedText(typeName));
                    case ERROR -> message.setText(createUnsubscriptionErrorText(typeName));
                }
            } catch (IllegalArgumentException e) {
                log.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–ø–∏—Å–∫–∏: {}", subscriptionType, e);
                message.setText(createInvalidSubscriptionTypeText());
            }
        }

        showMySubscriptions(chatId, message);
    }

    private void handleQuickUnsubscriptionCallback(String callbackData, String chatId, SendMessage message) {
        String subscriptionType = callbackData.replace("quick_unsub_", "");
        log.info("–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞: type={}, chatId={}", subscriptionType, chatId);

        try {
            NotificationEnum notificationEnum = NotificationEnum.valueOf(subscriptionType.toUpperCase());
            UnsubscriptionResult result =
                    telegramUserService.unsubscribe(notificationEnum, Long.parseLong(chatId));

            String typeName = getSubscriptionName(subscriptionType);

            switch (result) {
                case SUCCESS -> message.setText(createQuickUnsubscriptionSuccessText(typeName));
                case NOT_SUBSCRIBED -> message.setText(createQuickNotSubscribedText(typeName));
                case ERROR -> message.setText(createQuickUnsubscriptionErrorText(typeName));
            }
        } catch (IllegalArgumentException e) {
            log.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–∏: {}", subscriptionType, e);
            message.setText(createInvalidSubscriptionTypeText());
        }

        showQuickUnsubscribe(chatId, message);
    }

// –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

    private String createSubscribeToAllSuccessText(int newSubscriptions) {
        return String.format("""
            ‚úÖ <b>–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
            
            üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
            ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>%d</code>
            ‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: <code>5</code>
            
            üì¨ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!
            
            üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>
            """, newSubscriptions);
    }

    private String createAlreadySubscribedToAllText() {
        return """
            ‚ÑπÔ∏è <b>–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ!</b>
            
            ‚úÖ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫:</b>
            –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
            ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫
            ‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞
            ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞
            
            üí° <i>–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ</i>
            """;
    }

    private String createUnsubscribeFromAllSuccessText() {
        return """
            ‚úÖ <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>
            
            üîï <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
            ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω—ã –í–°–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>0</code>
            
            üí° <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>
            –ü–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'
            
            ‚ÑπÔ∏è <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ</i>
            """;
    }

    private String createAlreadySubscribedText(String subscriptionName) {
        return String.format("""
            ‚ÑπÔ∏è <b>–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>
            
            ‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> <code>%s</code>
            –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ</b>
            
            üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
            ‚Ä¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
            ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
            
            ‚ÑπÔ∏è <i>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</i>
            """, subscriptionName);
    }

    private String createNotSubscribedText(String subscriptionName) {
        return String.format("""
            ‚ÑπÔ∏è <b>–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>
            
            ‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> <code>%s</code>
            –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            üí° <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
            
            üîî <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>
            ‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥—ã
            ‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏
            ‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
            ‚Ä¢ –ë–ª–æ–≥–∏
            ‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            
            ‚ÑπÔ∏è <i>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</i>
            """, subscriptionName);
    }

    private String createQuickNotSubscribedText(String subscriptionName) {
        return String.format("""
            ‚ÑπÔ∏è <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>
            
            ‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b>
            –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: <code>%s</code>
            
            üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>
            ‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ
            
            üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
            –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            
            ‚ö° <i>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</i>
            """, subscriptionName);
    }

    private String createUnsubscriptionSuccessText(String subscriptionName) {
        return String.format("""
            ‚úÖ <b>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>
            
            ‚ùå <b>–û—Ç–∫–ª—é—á–µ–Ω–æ:</b> <code>%s</code>
            
            üîï <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã
            ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            
            üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>
            –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'
            
            üí° <i>–î—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã</i>
            """, subscriptionName);
    }

    private String createSubscriptionErrorText(String subscriptionName) {
        return String.format("""
            ‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏!</b>
            
            üö® <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:</b> <code>%s</code>
            
            üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
            ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            
            üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
            ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
            ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
            
            üîÑ <i>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</i>
            """, subscriptionName);
    }

    private String createUnsubscriptionErrorText(String subscriptionName) {
        return String.format("""
            ‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏!</b>
            
            üö® <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç:</b> <code>%s</code>
            
            üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
            ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            
            üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
            ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø–∏—Å–∫–∏
            ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
            
            üîÑ <i>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</i>
            """, subscriptionName);
    }

    private String createQuickUnsubscriptionErrorText(String subscriptionName) {
        return String.format("""
            ‚ùå <b>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞: –æ—à–∏–±–∫–∞!</b>
            
            üö® <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç:</b> <code>%s</code>
            
            ‚ö° <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø–∏—Å–∫–æ–π:</b>
            ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞
            ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            
            üîß <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –æ—Ç–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
            ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
            ‚Ä¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å—Ä–∞–∑—É
            
            üîÑ <i>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>
            """, subscriptionName);
    }

    private String createInvalidSubscriptionTypeText() {
        return """
            ‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏!</b>
            
            üö® <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>
            –£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            ‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
            ‚Ä¢ üèÜ –û–ª–∏–º–ø–∏–∞–¥—ã
            ‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏
            ‚Ä¢ üìù –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
            ‚Ä¢ üìñ –ë–ª–æ–≥–∏
            ‚Ä¢ üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            
            üîÑ <b>–†–µ—à–µ–Ω–∏–µ:</b>
            ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start
            
            üí° <i>–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>
            """;
    }
}